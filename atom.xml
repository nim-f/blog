<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Заметки о фронтэнде]]></title>
  <link href="http://nim-f.github.io/atom.xml" rel="self"/>
  <link href="http://nim-f.github.io/"/>
  <updated>2016-01-09T20:33:13+02:00</updated>
  <id>http://nim-f.github.io/</id>
  <author>
    <name><![CDATA[Ann R]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Как облегчить себе жизнь с помощью Gulp, Jade, Stylus и Yeoman]]></title>
    <link href="http://nim-f.github.io/blog/2016/01/09/scaffolding-frontend-with-gulp-and-yeoman/"/>
    <updated>2016-01-09T19:33:08+02:00</updated>
    <id>http://nim-f.github.io/blog/2016/01/09/scaffolding-frontend-with-gulp-and-yeoman</id>
    <content type="html"><![CDATA[<p>В работе фрондэнд-разработчика есть существенный недостаток - обилие рутинных задач, которые повторяются в каждом проекте. Либо настраивать для каждого проекта сборщик (Gulp или Grunt), шаблонизатор, препроцессор, подключить файлы скриптов и css, а потом создавать html-файл и писать в нем одни и те же обязательные теги, либо вообще не заморачиваться с модными штучками и хардкодить по-старинке на статичном html/css… И то, и другое довольно скучно и занимает массу драгоценного времени. Однажды некоторым особо-продвинутым фронтэндерам пришло в голову собирать для себя стартовый шаблон проекта и начинать разработку не с массы однообразных действий, а с команды git clone «бла-бла-бла». Но человеческая лень пошла дальше, и появился Yeoman - инструмент скаффолдинга проектов (и их отдельных частей).</p>

<p><img src="http://nim-f.github.io/images/yeoman.png" alt="Yeoman" /></p>

<p>Тут надо пояснить, что такое вообще этот скаффолдинг. Тем, кто знаком с Ruby on Rails и некоторыми другими фреймворками, слово покажется знакомым. Там команда generate scaffold широко используется для генерации каркаса приложения и отдельных его частей  - моделей, контроллеров и представлений. В случае с Yeoman генерируется целый проект - это может быть обычное веб- или мобильное приложение или шаблон для разработки с использованием фреймворка - Angular.js, React.js, Backbone.js и тд. Полный список генераторов здесь - <a href="http://yeoman.io/generators/.">http://yeoman.io/generators/.</a> Впрочем, этот список можно расширить, написав генератор самостоятельно, если существующие не устраивают.</p>

<!-- more -->


<p>Как установить Yeoman и популярный генератор webapp рассказывается в официальной документации - <a href="http://yeoman.io/.">http://yeoman.io/.</a> Webapp использует sass, а я бы хотела less или вообще stylus, а еще - jade в качестве шаблонизатора. Поэтому я выбрала Yeogurt - он показался мне более универсальным, потому что на стадии создания проекта предоставляет возможность выбрать шаблонизатор - jade или nunjucks, препроцессор - Less, Sass, или Stylus, и инструменты тестирования - Jasmine или Mocha + Chai. В общем, можно собрать проект на любой вкус. Приятный бонус - возможность хранить контент в json-формате, а не вписывать его статично в шаблон.</p>

<p>Итак, приступим. Node.js у вас конечно же установлен, но если он давно не обновлялся, лучше взять версию посвежее, иначе Yeoman будет ругаться.</p>

<p>Устанавливаем основной инструментарий глобально:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g yo bower grunt-cli gulp  
</span></code></pre></td></tr></table></div></figure>


<p>Теперь нужно поставить генератор, создать папку проекта и запустить его:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g generator-yeogurt
</span><span class='line'>mkdir my-new-project && cd $_
</span><span class='line'>yo yeogurt
</span></code></pre></td></tr></table></div></figure>


<p>Отвечаем на вопросы генератора, и вуаля - болванка для проекта готова. Запускаем сервер:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gulp serve
</span></code></pre></td></tr></table></div></figure>


<p>Чтобы увидеть стартовую страницу проекта, нужно зайти на localhost:3000. Это дефолтный адрес, можно вписать любой порт в файл package.json, если 3000 у вас уже чем-то занят.</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>  <span class="s2">&quot;config&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;//&quot;</span><span class="p">:</span> <span class="s2">&quot;Local Server Settings&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;host&quot;</span><span class="p">:</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;port&quot;</span><span class="p">:</span> <span class="s2">&quot;3000&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;baseUrl&quot;</span><span class="p">:</span> <span class="s2">&quot;./&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>В документации есть описание структуры проекта - что в каких каталогах лежит, впрочем, все достаточно очевидно <a href="https://github.com/larsonjj/generator-yeogurt#page">https://github.com/larsonjj/generator-yeogurt#page</a></p>

<p>Кстати, в проект заботливо включен и .gitignore файл, так что об этом беспокоиться тоже не нужно.</p>

<p>Окружение готово. Осталось понять, как оно может облегчить жизнь разработчику. Допустим, я хочу создать header для сайта. Для этого можно воспользоваться генератором модулей. Нужно запустить команду:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yo yeogurt:module header
</span></code></pre></td></tr></table></div></figure>


<p>И в ответ получим сообщение о том, что  следующие файлы созданы:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   create src/_modules/header/header.jade
</span><span class='line'>   create src/_modules/header/header.js
</span><span class='line'>   create src/_modules/header/tests/header.test.js
</span><span class='line'>   create src/_modules/header/header.styl
</span></code></pre></td></tr></table></div></figure>


<p>Посмотрим, что там нагенерировалось. В файле header.jade что-то не похожее на привычный html:</p>

<figure class='code'><figcaption><span>header.jade </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">mixin</span> header(spec)
</span><span class='line'>  <span class="p">-</span> <span class="n">spec</span> <span class="k">=</span> <span class="n">spec</span> <span class="o">||</span> <span class="o">{}</span>
</span><span class='line'>  <span class="p">-</span> <span class="n">spec</span><span class="o">.</span><span class="nc">__class</span> <span class="k">=</span> <span class="n">spec</span><span class="o">.</span><span class="nc">__class</span> <span class="o">||</span> <span class="err">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">div</span>(<span class="na">class=</span><span class="nv">spec</span><span class="err">.</span><span class="na">__class</span>)&amp;attributes(attributes)
</span><span class='line'>    <span class="nt">p</span> This is an example paragraph for the header module
</span></code></pre></td></tr></table></div></figure>


<p>Поэтому здесь потребуется небольшое лирическое отступление и помощь документации с сайта <a href="http://jade-lang.com/.">http://jade-lang.com/.</a> Миксин - это код, который можно использовать многократно, передавая ему разные параметры, то есть, что-то вроде функции. Например, чтобы отобразить содержимое header.jade,
нужно подключить его в файле index.jade, вот так:</p>

<figure class='code'><figcaption><span>index.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">include</span> _modules/header/header
</span></code></pre></td></tr></table></div></figure>


<p>Расширение файла писать не обязательно, jade достаточно умен, чтобы не пытаться подключать js или css :)</p>

<p>Затем надо вставить сам миксин, например, так:</p>

<figure class='code'><figcaption><span>index.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">block</span> content
</span><span class='line'>  <span class="nt">div</span> #[+header]
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Теперь переходим в браузер, и даже не нужно жать F5, чтобы обновить страницу - gulp уже сделал это в момент сохранения .jade файла - изменения уже видны. Но в случае с header’ом польза миксеров недостаточно очевидна. Лучше это ясно на примере с миксином field. Генерируем модуль с таким названием:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yo yeogurt:module field
</span></code></pre></td></tr></table></div></figure>


<p>Получается то же самое, что и в предыдущем примере. Открываем файл field.jade и заменяем дефолтный код на наш собственный:</p>

<figure class='code'><figcaption><span>field.jade </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">mixin</span> field(name, type, value, placeholder)
</span><span class='line'>  <span class="nt">input</span>(<span class="na">type=</span><span class="nv">type</span><span class="err">,</span> <span class="na">name=</span><span class="nv">name</span><span class="err">,</span> <span class="na">value=</span><span class="nv">value</span><span class="err">,</span> <span class="na">placeholder=</span><span class="nv">placeholder</span>)
</span></code></pre></td></tr></table></div></figure>


<p>В index.jade вставляем миксины с параметрами:</p>

<figure class='code'><figcaption><span>index.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">include</span> _modules/field/field
</span><span class='line'>
</span><span class='line'><span class="nt">block</span> content
</span><span class='line'>  <span class="nt">div</span> #[+header]
</span><span class='line'>
</span><span class='line'> <span class="err">#[+</span><span class="nt">field</span>(<span class="err">&#39;</span><span class="na">name</span><span class="err">&#39;,</span> <span class="err">&#39;</span><span class="na">text</span><span class="err">&#39;,</span> <span class="err">&#39;&#39;,</span> <span class="err">&#39;</span><span class="na">Enter</span> <span class="na">your</span> <span class="na">name</span><span class="err">&#39;</span>)]
</span><span class='line'> <span class="err">#[+</span><span class="nt">field</span>(<span class="err">&#39;</span><span class="na">email</span><span class="err">&#39;,</span> <span class="err">&#39;</span><span class="na">email</span><span class="err">&#39;,</span> <span class="err">&#39;&#39;,</span> <span class="err">&#39;</span><span class="na">Enter</span> <span class="na">e-mail</span> <span class="na">address</span><span class="err">&#39;</span>)]
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Конечно, если нужно добавить всего пару полей, создавать миксин нет смысла, но для повторяющихся элементов - например, на страницах с длинными формами регистраций или заявок, эта возможность очень полезна. Вообще, jade - это тема для отдельного поста, поэтому тут я с ним, пожалуй, закруглюсь, и оставлю вот эту ссылку -
<a href="https://medium.com/@_jh3y/why-dont-more-people-know-about-use-jade-an-intro-to-jade-5c34422c9b4d#.6tqyps5rx">https://medium.com/@_jh3y/why-dont-more-people-know-about-use-jade-an-intro-to-jade-5c34422c9b4d#.6tqyps5rx</a></p>

<p>Теперь мне не терпится попробовать возможность хранить контент в json-файлах. Надо создать один такой для меню сайта в шапке:</p>

<figure class='code'><figcaption><span>src/_data/menu.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;link&quot;</span> <span class="p">:</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;About&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;link&quot;</span> <span class="p">:</span> <span class="s2">&quot;/about&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Contacts&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;link&quot;</span> <span class="p">:</span> <span class="s2">&quot;/contacts&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Для вывода массива можно воспользоваться функцией итерации в jade. Это будет выглядеть так:</p>

<figure class='code'><figcaption><span>header.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'>    <span class="nt">ul</span>
</span><span class='line'>      <span class="nt">each</span> val, index in site.data.menu
</span><span class='line'>        <span class="nt">li</span>
</span><span class='line'>          <span class="nt">a</span>(<span class="na">href=</span><span class="nv">val</span><span class="err">.</span><span class="na">link</span>)<span class="p">=</span> <span class="k">val</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Лаконично, красиво и никаких незакрытых тегов. И вот оно - меню в шапке готово.</p>

<p>Теперь добавим стили. Stylus позволяет придерживаться такой же простоты синтаксиса в css. Для начала импортируем файл модуля header в  _styles/main.styl</p>

<figure class='code'><figcaption><span>_styles/main.styl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span> <span class="s1">&#39;../_modules/header/header&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Теперь можно делать все что угодно - выкинуть из кода все скобки, двоеточия и точки с запятыми, вводить переменные, задавать сложные селекторы отступами:</p>

<figure class='code'><figcaption><span>_modules/header/header.styl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">font-size</span> <span class="o">=</span> <span class="nt">14px</span>
</span><span class='line'><span class="nt">font-family</span> <span class="o">=</span> <span class="s1">&#39;PT Sans&#39;</span><span class="o">,</span> <span class="nt">Arial</span>
</span><span class='line'><span class="nt">link-color</span> <span class="o">=</span> <span class="nf">#0266d6</span>
</span><span class='line'><span class="nt">ul</span>
</span><span class='line'>  <span class="nt">li</span>
</span><span class='line'>    <span class="nt">display</span> <span class="nt">inline-block</span>
</span><span class='line'>    <span class="nt">font</span> <span class="nt">font-size</span> <span class="nt">font-family</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">a</span><span class="nd">:link</span><span class="o">,</span> <span class="nt">a</span><span class="nd">:visited</span><span class="o">,</span> <span class="nt">a</span><span class="nd">:active</span>
</span><span class='line'>      <span class="nt">color</span> <span class="nt">link-color</span>
</span></code></pre></td></tr></table></div></figure>


<p>Меньше кликов по клавиатуре, меньше кода, меньше вероятность ошибок - больше продуктивности и денег за качественно выполненную работу :) А Gulp и Yeoman сконвертируют в продакшн привычный css, понятный браузерам. Чтобы узнать про Stylus больше - добро пожаловать на офф. сайт <a href="http://stylus-lang.com/.">http://stylus-lang.com/.</a> В Stylus, как и в jade, есть возможность создавать миксины, функции и прочие приятные девелоперскому глазу штучки.</p>

<p>Во всем этом великолепии мне не хватает возможности автоматической генерации спрайтов, но это можно исправить самостоятельно - вот полезная статья на эту тему <a href="http://habrahabr.ru/post/227945/.">http://habrahabr.ru/post/227945/.</a> Я попробовала, все сработало отлично. Главное - не забыть добавить таск  к build и serve, чтобы спрайты создавались при запуске проекта.</p>

<figure class='code'><figcaption><span>gulpfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Build production-ready code</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>  <span class="s1">&#39;sprite&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;copy&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;imagemin&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;jade&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;stylus&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;browserify&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Server tasks with watch</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;serve&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>  <span class="s1">&#39;sprite&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;imagemin&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;copy&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;jade&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;stylus&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;browserify&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;browserSync&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;watch&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Итак, меню у нас есть, а страниц, на которые оно ссылается - нету. Это легко исправить при помощи все того же генератора. Не требуется создавать файл вручную, достаточно выполнить в терминале команду</p>

<figure class='code'><figcaption><span>gulpfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">yo</span> <span class="nx">yeogurt</span><span class="o">:</span><span class="nx">page</span> <span class="nx">about</span>
</span></code></pre></td></tr></table></div></figure>


<p>Но на ней нет шапки сайта! Тут я поняла свою ошибку и переподключила header в файл _layouts/base.jade</p>

<figure class='code'><figcaption><span>_layouts/base.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">include</span> ../_modules/header/header
</span><span class='line'>  <span class="nt">block</span> header
</span><span class='line'>    <span class="nt">div</span> #[+header]
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Из файла index.jade все, что касается модуля header можно удалить.</p>

<p>Аналогичным способом можно подключить в layout подвал сайта и другие элементы, или можно даже сгенерировать новый layout:</p>

<figure class='code'><figcaption><span>_layouts/base.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">yo</span> yeogurt:layout one-col
</span></code></pre></td></tr></table></div></figure>


<p>и создавать страницы, отличные от дефолтных, передавая параметр в команде</p>

<figure class='code'><figcaption><span>_layouts/base.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">yo</span> yeogurt:page contacts --layout=one-col
</span></code></pre></td></tr></table></div></figure>


<p>Когда работа над дизайном будет закончена, нужно запустить команду</p>

<figure class='code'><figcaption><span>_layouts/base.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">gulp</span> --production
</span></code></pre></td></tr></table></div></figure>


<p>чтобы получить версию сайта с минифицированным js/css и сжатыми картинками.</p>

<p>Теперь все готово для того, чтобы делать реальный проект с использованием продвинутых фронтэнд-технологий вместо старого-доброго html/css.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как сделать простое мобильное приложение с помощью Apache Cordova и AngularJS]]></title>
    <link href="http://nim-f.github.io/blog/2016/01/06/make-simple-mobile-app-with-cordova-and-angularjs/"/>
    <updated>2016-01-06T10:50:21+02:00</updated>
    <id>http://nim-f.github.io/blog/2016/01/06/make-simple-mobile-app-with-cordova-and-angularjs</id>
    <content type="html"><![CDATA[<p>Все мои планы на долгие рождественские выходные полетели коту под хвост из-за погоды. Сначала снег, а я на летней резине. Потом оттепель, гололед, лужи, дождь, туман, все разом - от одного взгляда за окно хочется еще глубже залезть под одеяло. Вместо того, чтобы слоняться по дому в тоске, я решила попробовать то, чего никогда не делала - написать мобильное приложение и поставить его на свой android-смартфон. А в случае успеха написать небольшой гайд для таких же новичков, как я.</p>




<p>Cordova - это open-sourse проект, позволяющий создавать программы для мобильных устройств, используя стандартные инструменты веб-разработчика: HTML, CSS и Javascript. По сути, мы просто пишем сайт, а потом запускаем в консоли волшебную команду, и она превращает его в приложение для выбранных платформ. Документация в подробностях здесь - <a href="https://cordova.apache.org" target="_blank">www.cordova.apache.org</a>, и я постараюсь ее не пересказывать, а сосредоточиться  на руководстве к действию.</p>




<!-- more -->




<p>Вот что должно получиться в результате:</p>


<p><img src="http://nim-f.github.io/images/listimg.png" alt="shopList app" /></p>

<p>Я решила сделать простую программку для ведения списков - будь то список продуктов для похода в магазин или to-do list, потому что все имеющиеся в google play бесплатные программы угнетают меня своим дизайном или обилием ненужных функций.</p>




<p>Описание установки рабочего окружение актуально для OS X и других unix систем, но не думаю, что на Windows порядок действий будет радикально отличаться.</p>




<p>Итак, предположим, что Node.js и git у Вас уже установлены. Ставим Cordova:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g cordova</span></code></pre></td></tr></table></div></figure>


<p>Затем, чтобы запускать эмулятор и делать билд приложения, нужно установить всю требуху для выбранной платформы - iOS, android, windows или еще какой-нибудь. Полный список поддерживаемых платформ и фич <a href="https://cordova.apache.org/docs/en/latest/guide/support/index.html" target="_blank">все там же</a></p>




<p>Моя цель - android, поэтому поставить пришлось следующее:</p>




<ul>
<li>Java</li>
<li>Java SE Development Kit</li>
<li>Android SDK</li>
</ul>




<p>Теперь можно создавать проект, точно так же, как описано в официальной документации:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cordova create hello com.example.hello HelloWorld
</span><span class='line'>cd hello
</span><span class='line'>cordova platform add android
</span><span class='line'>cordova platform add browser
</span></code></pre></td></tr></table></div></figure>




<p>И запускаем билд.</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cordova build</span></code></pre></td></tr></table></div></figure>




<p>Если все пройдет гладко, вы увидите в терминале многабукаф и надпись "BUILD SUCCESSFUL" в самом конце.</p>




<p>Я, помимо андроида, добавила в список платформ браузер, потому что для меня отлаживать разметку и css так гораздо удобнее, чем каждый раз перезапускать эмулятор или ставить новую версию приложения на физическое устройство.</p>




<p>Кстати, чуть не забыла - если до этого Вы не запускали андроид-эмулятор, то нужно будет его создать, но это просто, сообщение об ошибке в командной строке подскажет вам, как.</p>




<p>Запускаем только что созданный шаблон приложения в эмуляторе:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cordova emulate android</span></code></pre></td></tr></table></div></figure>




<p>Или в браузере:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cordova run browser</span></code></pre></td></tr></table></div></figure>


<p>Или устанавливаем и запускаем на живом устройстве:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cordova run android</span></code></pre></td></tr></table></div></figure>




<p>Перед нами дефолтная болванка программы с логотипом Кордовы и надписью "device is ready". Все дальнейшие изменения нужно производить в каталоге www. При запуске любой из указанных выше трех команд или </p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cordova build</span></code></pre></td></tr></table></div></figure>




<p>Cordova сама сгенерирует нам правильный код и сложит его в папку platforms, в которой мы пока что ничего не трогаем.</p>




<p>Чтобы сделать задачу более интересной, я решила использовать AngularJS. Этот фреймворк сейчас в моде, значит надо попробовать и понять, почему все так любят его, а не какой-нибудь Backbone.js.</p>




<p>В этом случае нам здорово облегчит жизнь <a href="http://ngcordova.com/" target="_blank">ngCordova</a>. Это прослойка между angular и плагинами cordova, предоставляющая тонну возможностей в минимуме кода.</p>




<p>Открываем index.html в папке www и подключаем скрипты:</p>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="c">&lt;!-- собственно ангуляр --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- библиотека для событий touch и swipe на сенсорных девайсах --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/angular-touch.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- ngCordova должна быть подключена после ангуляра, но до самой Cordova--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/ng-cordova.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Cordova.js был по дефолту --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;cordova.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- файл контроллера для нашего приложения --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- дефолтный index.js - предлагаю его пока не удалять, а просто закомментить его содержимое, мало ли, вдруг пригодится --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/index.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>Дальше самое простое - разметка. Нам нужен заголовок, список и текстовое поле с кнопкой. Да здравствует минимализм! </p>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;</span>Shop List<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;</span>
</span><span class='line'>                //тут будет содержимое списка
</span><span class='line'>            <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li</span> <span class="na">ng-bind=</span><span class="s">&quot;new_item&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;new_item&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;add-item&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Add<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>Теперь очередь контроллера. Записываем в него массив с нашим списком покупок (пока что статично) и функцию добавления нового элемента в список.</p>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">shopList</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;shopList&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngCordova&#39;</span><span class="p">,</span> <span class="s1">&#39;ngTouch&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">shopList</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ItemsListCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Bread&quot;</span><span class="p">,</span> <span class="s2">&quot;qty&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;priority&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Fruits&quot;</span><span class="p">,</span> <span class="s2">&quot;qty&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;priority&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Water&quot;</span><span class="p">,</span> <span class="s2">&quot;qty&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;status&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;priority&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">itemObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="nx">name</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;qty&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;status&#39;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;priority&#39;</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">itemObj</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">itemObj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">new_item</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<p>Вносим соответствующие изменения в шаблон - добавляем контроллер к тегу body, ng-repeat из массива к li, привязываем к текстовому полю модель new_item, а к кнопке - функцию добавления новой записи.</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&quot;shopList&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;app&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;ItemsListCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;</span>Shop List<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items track by $index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                {{item.name}}
</span><span class='line'>            <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li</span> <span class="na">ng-bind=</span><span class="s">&quot;new_item&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;new_item&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;add-item&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;new_item&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;add(new_item)&quot;</span><span class="nt">&gt;</span>Add<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<p>На css подробно останавливаться не буду. В конце статьи есть ссылка на репозиторий с кодом, можно использовать css-файл оттуда или написать самостоятельно.</p>




<p>Если сейчас вы запустите команду</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>cordova run browser
</span></code></pre></td></tr></table></div></figure>


<p>или </p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>cordova run android
</span></code></pre></td></tr></table></div></figure>


<p>то приложение будет работать - добавлять запись в список. Но если его перезапустить, новые данные не сохранятся. Поэтому надо записывать их в какое-нибудь постоянное хранилище. </p>




<p>Официальная документация предлагает несколько <a href="https://cordova.apache.org/docs/en/4.0.0/cordova/storage/storage.html" target="_blank">вариантов</a>. Я воспользуюсь двумя, которые мне кажутся самыми простыми - localStorage и запись в файл.</p>




<p>Для начала рассмотрим localStorage - это легче всего, не нужны никакие дополнительные плагины, просто сохраняем массив с объектами в строку и записываем. Нужно добавить следующий код в конец функции add:</p>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Save to localStorage</span>
</span><span class='line'>        <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<p>И в самое начало контроллера, вместо статичного массива:</p>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">shopList</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ItemsListCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$cordovaFile</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Load from localStorage</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>Можно оставить так или же записывать наши данные в файл. Я выбираю второй вариант. Для него потребуется использовать модуль <a href="http://ngcordova.com/docs/plugins/file/" target="_blank">File</a> из ngCordova.</p>




<p>Удаляем (или комментируем) код про localStorage, и вместо него добавляем вот это:</p>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">shopList</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ItemsListCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$cordovaFile</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;deviceready&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">listPath</span> <span class="o">=</span> <span class="nx">cordova</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">externalRootDirectory</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//Read from file</span>
</span><span class='line'>        <span class="nx">$cordovaFile</span><span class="p">.</span><span class="nx">readAsText</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">listPath</span><span class="p">,</span> <span class="s2">&quot;list.json&quot;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Error! &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>Этот плагин будет читать информацию из файла и в случае успеха возвращать строку, которую необходимо сконвертировать в объект для дальнейшего использования, а в случае ошибки - выводить алерт с ее описанием. Но чтобы что-то прочитать, нужно сначала что-то записать! Добавляем функцию writeFile.</p>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">writeFile</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$cordovaFile</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">listPath</span><span class="p">,</span> <span class="s2">&quot;list.json&quot;</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="kc">true</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Error! &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<p>И используем ее в функции add вместо записи в localStorage:</p>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">itemObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="nx">name</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;qty&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;status&#39;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;priority&#39;</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">itemObj</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">itemObj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">new_item</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//Save to file</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<p>Вот и все, теперь все данные записаны в файле. Я записала их в externalRootDirectory, просто потому что мне так захотелось (а еще потому, что так при переустановке приложения во время разработки файл не перезаписывается), но правильнее было бы использовать applicationStorageDirectory или externalApplicationStorageDirectory, чтобы не увеличивать энтропию во вселенной.</p>




<p>Теперь мы можем добавлять пункты в список, и они точно никуда не денутся, потому что возможности удаления в программе пока не предусмотренно :) Но это легко исправить. Как лучше реализовать удаление пункта меню в нашем минималистичном интерфейсе? Сделать кнопку? Нет, так мне не нравится, лучше добавить возможность вывода меню по долгому нажатию на пункт списка. Пока что в этом меню будет только одна опция - "Delete", но впоследствии можно будет добавить туда что-нибудь еще.</p>




<p>Реализуем это с помощью директивы, которая будет ловить событие долгого нажатия. Я не писала ее сама, а взяла отсюда: <a href="https://gist.github.com/BobNisco/9885852" target="_blank">https://gist.github.com/BobNisco/9885852</a></p>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">shopList</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;shopList&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngCordova&#39;</span><span class="p">,</span> <span class="s1">&#39;ngTouch&#39;</span><span class="p">]).</span>
</span><span class='line'><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;onLongPress&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$timeout</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$elm</span><span class="p">,</span> <span class="nx">$attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$elm</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// Locally scoped variable that will keep track of the long press</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">longPress</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// We&#39;ll set a timeout for 600 ms for a long press</span>
</span><span class='line'>                    <span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">longPress</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="c1">// If the touchend event hasn&#39;t fired,</span>
</span><span class='line'>                            <span class="c1">// apply the function given in on the element&#39;s on-long-press attribute</span>
</span><span class='line'>                            <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                                <span class="nx">$scope</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="nx">$attrs</span><span class="p">.</span><span class="nx">onLongPress</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">});</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">},</span> <span class="mi">600</span><span class="p">);</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">$elm</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;touchend&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// Prevent the onLongPress event from firing</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">longPress</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                    <span class="c1">// If there is an on-touch-end function attached to this element, apply it</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">$attrs</span><span class="p">.</span><span class="nx">onTouchEnd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">$scope</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="nx">$attrs</span><span class="p">.</span><span class="nx">onTouchEnd</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">});</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>Так же, как в примере, добавляем обработчик события:</p>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">itemOnLongPress</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">menu</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<p>С его помощью а также благодаря встроенной директиве ng-show в шаблоне можно изменять видимость контекстного меню для каждого пункта.</p>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items track by $index&quot;</span> <span class="na">on-long-press=</span><span class="s">&quot;itemOnLongPress($index)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{item.name}}
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-menu&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;item.menu&quot;</span> <span class="na">ng-init=</span><span class="s">&quot;item.menu = false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li</span> <span class="na">ng-click=</span><span class="s">&quot;delete($index)&quot;</span><span class="nt">&gt;</span>Remove<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>Внимательные могли заметить, что я уже добавила вызов функции delete, теперь надо написать саму эту функцию, которая будет удалять указанный объект из массива и перезаписывать файл. Параметр $index обозначает порядковый номер элемента в массиве, начиная с нуля.</p>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="k">delete</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<p>Ну вот, теперь можно и добавлять, и удалять записи списка. Но чего-то не хватает... Я думаю, нужно как-то маркировать статус записи - выполнено/не выполнено. Я использую для этого иконки из FontAwesome - icon-check для пункта, помеченного выполненным, и icon-check-empty для пустого чекбокса.</p>




<p>Меняем разметку:</p>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items track by $index&quot;</span> <span class="na">on-long-press=</span><span class="s">&quot;itemOnLongPress($index)&quot;</span> <span class="na">on-touch-end=</span><span class="s">&quot;itemOnTouchEnd($index)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;i</span> <span class="na">ng-class=</span><span class="s">&quot;{&#39;icon-check-empty&#39;: !item.status, &#39;icon-check&#39;: item.status}&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;changeStatus($index)&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>  
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>И добавляем функцию для переключения статуса:</p>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeStatus</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">status</span> <span class="o">=</span> <span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">status</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Теперь сделанные дела и купленные продукты можно пометить галочкой, все как у тру-девелоперов, хаха :) </p>




<p>Итак, у нас есть законченное приложение, которое выполняет свои функции, и ушло на его создание всего несколько часов (вкуривание документации в эти часы тоже входит). Писала пост об этом я гораздо дольше, чем делала само приложение! </p>




<p>Теперь можно подключить свой телефон, включить отладку по USB, установить приложение и наслаждаться своим могуществом)</p>




<p>Полный код здесь: <a href="https://github.com/rthewheel/shopList/" target="_blank">https://github.com/rthewheel/shopList/</a>

Но он, возможно, будет изменяться.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webkit, Transform и лишние пиксели]]></title>
    <link href="http://nim-f.github.io/blog/2016/01/01/webkit-extra-pixels/"/>
    <updated>2016-01-01T11:25:23+02:00</updated>
    <id>http://nim-f.github.io/blog/2016/01/01/webkit-extra-pixels</id>
    <content type="html"><![CDATA[<p>Чем сложнее сайт - тем причудливее и трудноуловимее баги. Например, использование всеми любимого свойства transform вызывает у webkit-браузеров массу странностей в отрисовке страницы - проблемы со сглаживанием шрифтов, дергающиеся при ховере блоки и многое другое. Далеко ходить за примерами не надо: <!-- more --> вот есть два блока, один в другом, и к ним применено свойство </p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">transform</span><span class="o">:</span> <span class="nt">skew</span><span class="o">(</span><span class="nt">19deg</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<p>Вроде бы все прекрасно, но... пиксели родительского блока почему-то выползают из-под дочернего, едва заметно, но достаточно, чтобы вызвать недовольство клиента и багрепорт в мой адрес.</p>


<p><img src="http://nim-f.github.io/images/extrapixels.png" alt="webkit extra pixels" /></p>

<p><i style="color: #9e9e9e; font-style: italic;">(кому не видно - нажмите пару раз command +)</i></p>

<p>Я повертела эти блоки и так, и эдак, но результатов это не принесло. Пришлось подключать тяжелую артиллерию - stackoverflow, и после некоторого количества безуспешных экспериметов я этот коварный баг все-таки исправила!</p>


<p></p>

<p>Решение простое - к родительскому div'у этих двух элементов добавить следующие свойства:</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">-webkit-transform-style</span><span class="o">:</span> <span class="nt">preserve-3d</span><span class="o">;</span>
</span><span class='line'><span class="nt">-webkit-backface-visibility</span><span class="o">:</span> <span class="nt">hidden</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Теперь края у элеметов ровные, <s>гладкие и шелковистые</s>, все красиво и все довольны :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Первый пост!]]></title>
    <link href="http://nim-f.github.io/blog/2015/12/27/initial-post/"/>
    <updated>2015-12-27T08:42:25+02:00</updated>
    <id>http://nim-f.github.io/blog/2015/12/27/initial-post</id>
    <content type="html"><![CDATA[<p>Недавно, заблудившись в закладках своего браузера, пытасясь найти нужную ссылку на стаковерфлоу среди вязания и милых щеночков, я осознала потребность аккумулировать свой опыт в верстке и js-фреймворках в одном месте. Тогда, несколькими командами в консоли я создала этот блог (спасибо разработчикам Octopress), и теперь в нем я буду писать о своих открытиях и экспериментах (возможно, не только с фронтэндом), постить полезные штуки, которыми пользуюсь в работе  - прежде всего чтобы самой не забыть.
</p>

]]></content>
  </entry>
  
</feed>
